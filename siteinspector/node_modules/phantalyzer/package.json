{
  "name": "phantalyzer",
  "version": "0.1.80",
  "description": "A PhantomJS script for running Wappalyzer over many sites using a headless Webkit browser",
  "main": "simple.js",
  "dependencies": {
    "q": "0.8.12",
    "string": "1.2.0",
    "underscore": "1.4.4",
    "csv": "0.3.3",
    "mustache": "0.7.2",
    "finite-csv": "0.0.3",
    "commander": "1.3.0",
    "connect": "2.10.1"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node server.js"
  },
  "author": {
    "name": "Michael Connor"
  },
  "license": "BSD",
  "keywords": [
    "compliance",
    "tags",
    "analytics",
    "crawler",
    "report",
    "PhantomJS",
    "Wappalyzer"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mlconnor/phantalyzer"
  },
  "files": [
    "csv2phant.js",
    "phant2csv.js",
    "phantalyzer.js",
    "regexlist.json",
    "wappalyzer",
    "server.js"
  ],
  "readme": "### Overview ###\nPhantalyzer is a [PhantomJS](http://phantomjs.org/) (headless Webkit browser bot) based tool that leverages [Wappalyzer](http://wappalyzer.com/) (browser plugin) to detect software in use across a large number of sites.  Wappalyzer is a browser plug-in so it's original design is to provide feedback from within the browser.  My intent here is to enable analysis and reporting for a large numbers of sites.  An example of this would be a report that indicates which sites are using Flash (and may need to be converted), which are not using proper analytics tags, etc.\n\n### Installation ###\n\nIn order to use Phantalyzer, you must install PhantomJS.  It is also important to note that PhantomJS and Node.js look very similar but they are completely different platforms.  In this project, we use PhantomJS to handle the web page loading but Node.js to handle everything else such as analysis of the data.\n\n### Details and Usage ###\n\nAt the core of the system is a js file called phantalyzer.js.  This file is a PhantomJS script that will open a headless Webkit browser, navigate to the site, and essentially write everything it sees to standard output.  This output also includes output from the Wappalyzer scripts.  You can run this by doing the following.\n\nphantomjs phantalyzer.js http://www.cnn.com\n\nAll of the output HTML from CNN would be piped to standard out as well as headers, resources requested, and last but not least, the apps detected by the Wawppalyzer.  Here is an example of the information written out from Wappalyzer.\n\n    detectedApps: Disqus|jQuery|Modernizr|Nginx|Optimizely|Prototype|script.aculo.us\n    wappalyzerDetected: Disqus\n    wappalyzerDetected: jQuery\n    wappalyzerDetected: Modernizr\n    wappalyzerDetected: Nginx\n    wappalyzerDetected: Optimizely\n    wappalyzerDetected: Prototype\n    wappalyzerDetected: script.aculo.us\n\nHere is a list of all of the current information presented by the script.  Each field is on a new line and has a colon afterwards.\n\n    detectedApps\n    error\n    info\n    page.redirect.code\n    pageContent\n    pageError\n    pageError\n    pageHttpCode\n    pageLoadTimeMillis\n    pageUrl\n    requestedUrl\n    requestedUrlDomain\n    resolvedUrlDomain\n    resourceError\n    resourceHeader\n    resourceReceived\n    resourceRequested\n    screenShotPath\n    wappalyzerDetected\n\nphantalyzer.js can accept a number of parameters.  Many of these are just pass through to PhantomJS.  Here is a list of the parameters that are take from PhantomJS and their defaults.\n\n    javascriptEnabled = true\n    loadImages = true\n    localToRemoteUrlAccessEnabled = true\n    userAgent = true\n    userName = true\n    password = true\n    XSSAuditingEnabled = true\n    webSecurityEnabled = true\n\nphantalyzer.js also accepts an imageFile parameter so enables you to indicate that an screen shot should be captured and written to disk.  You can do this as follows.\n\n    phantalyzer.js --imageFile ~/tmp/cnn.png --webSecurityEnabled false http://cnn.com\n\nIf you are not planning to take screen shots or dod analysis such as web analytics where images need to be loaded, then you should consider setting loadImages to false to speed things up.\n\n    phantalyzer.js --loadImages false http://cnn.com\n\n### Runing over multiple sites ###\n\nIf you goal is to load a bunch of sites and generate reports then you will want to look at csv2phant.js.  This program will load in a CSV file full of site info and run phantalyzer.js for each site.  You can then use phant2csv.js to scoop up that data and get it back into a spreadsheet.  There is a critical parameter called urlColumn that will enable you to specify the CSV column name that the program should use as a URL for PhantomJS.\n\n    node csv2phant.js --dataDir ~/tmp/phantalyzerData --csvFile  listOfSites.csv  --imageFormat png --urlColumn URL\n\ncsv2phant.js will run PhantomJS over each file in your CSV and dump a text report and image out to the data directory you specified.  phant2csv.js will process these and generate a spreadsheet with rollup data.\n\n    node phant2csv.js --dataDir ~/tmp/phantalyzerData --csvFile  listofSites.csv --regexFile regexlist.json --urlColumn URL\n\nThe file regexlist.json is a list of regular expressions that will enable you to pull out key information from the output files and turn them into columns in the output.  This is of course customizable.\n\n### server.js ###\n\nThis was not originally written to act as a server but because that is the logical progression, I wrote a small connect.js based server that illustrates how you could conceivably run this.  If you run the server like so....\n\n```\nnode server.js\n```\n\nThen you would be able to curl to it like this...\n\n```\ncurl http://localhost:3000/?url=http://cnn.com\n```\n\nAnd the result would look like this...\n\n```\n{ 'Requested URL': 'http://www.cnn.com',\n  'Page URL': 'http://www.cnn.com/',\n  'Page Error': '',\n  'Page Error Detail': '',\n  'General Error Count': '0',\n  'Page Error Count': '0',\n  'Resource Error Count': '0',\n  'Domain Change': '',\n  'CName Change': '',\n  PageLoad: '4489',\n  'Copyright date': '2013',\n  Websphere: '',\n  '.NET': '',\n  PHP: '',\n  Janrain: '',\n  Flash: '',\n  Wordpress: '',\n  CQ: '',\n  'Operating System': '',\n  'Webtrends Tagging': '',\n  'Webtrends ID': '',\n  'Google Analytics': '',\n  'Pop-ups': '',\n  'Video on Homepage': '',\n  'Audio on Homepage': '',\n  Downloads: '',\n  Screensavers: '',\n  Emoticons: '',\n  Twitter: '',\n  'Google Search': '',\n  Facebook: '',\n  Youtube: '',\n  Netbiscuits: '',\n  'Detected Apps': 'Disqus|jQuery|Modernizr|Nginx|Optimizely|Prototype|script.aculo.us' }\n```\n\nKeep in mind that server.js is a starting point for you to write your own server.  I would also recommend using something like Express.js instead of connect.js.  I like connect because it is so lightweight and I just wanted to do something simple.\n\n### The following is a list of apps the Wappalyzer detects ###\n\n```\n1C-Bitrix\n1und1\n2zProject\nAddThis\nAdobeCQ5\nAdobeGoLive\nAdvancedWebStats\nAlloy\nAmetys\nAmiro.CMS\nAMPcms\nAOLserver\nApache\nApacheJSPWiki\nApacheTomcat\nApacheTrafficServer\nArcForum\nATGWebCommerce\nAtlassianConfluence\nAtlassianJira\nAWStats\nBackbone.js\nBanshee\nBIGACE\nBigDump\nBigware\nBlip.tv\nBlogger\nBrowserCMS\nBugzilla\nBurningBoard\nBusinessCatalyst\nCakePHP\nCargo\nCentOS\nCFML\nChameleon\nChamilo\nChartbeat\nCherokee\nCKEditor\nClickHeat\nClickTale\nClicky\nCMSMadeSimple\nCO2Stats\nCodeIgniter\nCommerceServer\ncomScore\nConcrete5\nConnect\nContao\nContenido\nContens\nConversionLab\nCoppermine\nCosmoshop\nCotonti\nCouchDB\ncPanel\nCPGDragonfly\nCrazyEgg\nCSCart\nCubeCart\nCufon\nd3\nDancer\nDanneoCMS\ndashCommerce\nDataLifeEngine\nDavidWebbox\nDebian\nDedeCMS\nDemandware\nDHTMLX\nDirectAdmin\nDisqus\nDjango\nDjangoCMS\nDojo\nDokeos\nDokuWiki\nDotNetNuke\nDoxygen\nDreamWeaver\nDrupal\nDrupalCommerce\nDynamicweb\ne107\nEcodoo\nEPiServer\nExhibit\nExpress\nExpressionEngine\nExtJS\neZPublish\nFactFinder\nFASTESP\nFASTSearchforSharePoint\nFlexCMP\nFluxBB\nFlyspray\nFreeBSD\nFrontPage\nFWP\nGallery\nGambio\nGauges\nGentoo\nGetSatisfaction\nGetSimpleCMS\nGoogleAnalytics\nGoogleAppEngine\nGoogleFontAPI\nGoogleMaps\nGoogleSites\nGoStats\nGraffitiCMS\nGravatar\nGravityInsights\nHandlebars\nHiawatha\nHighcharts\nHotaruCMS\nHybris\nIBMHTTPServer\nIBMWebSpherePortal\nIBMWebSphereCommerce\nIIS\nImpressPages\nIndexhibit\nInstantCMS\nIntershop\nIPB\niWeb\nJalios\nJava\nJavascriptInfovisToolkit\nJo\nJobberBase\nJoomla\njqPlot\njQTouch\njQuery\njQueryMobile\njQuerySparklines\njQueryUI\nJSCharts\nJTLShop\nK2\nKampyle\nKenticoCMS\nKoego\nKohana\nKolibriCMS\nKoobi\nLEPTON\nLiferay\nLightMon\nlighttpd\nLimeSurvey\nLiveJournal\nLotusDomino\nMagento\nMambo\nMantisBT\nMaxSiteCMS\nMediaWiki\nMeebo\nMicrosoftASP.NET\nMicrosoftSharePoint\nMiniBB\nMint\nMixpanel\nMochiKit\nModernizr\nMODx\nMojolicious\nMollom\nMondoMedia\nMongrel\nMoodle\nMoogo\nMooTools\nMovableType\nMustache\nMyBB\nMyBlogLog\nMynetcap\nNedstat\nNetBiscuits\nNetmonitor\nNginx\nnode.js\nNOIX\nnopCommerce\nOneStat\nOpenCart\nopenEngine\nOpenGSE\nOpenLayers\nOpenNemas\nOpenWebAnalytics\nOptimizely\nOracleRecommendationsOnDemand\nosCommerce\nosCSS\nOXIDeShop\nPANSITE\npapayaCMS\nParse.ly\nPercussion\nPerl\nPHP\nphpBB\nphpCMS\nphpDocumentor\nPHP-Fusion\nphpMyAdmin\nPHP-Nuke\nphpPgAdmin\nPiwik\nPlentymarkets\nPlesk\nPligg\nPlone\nPlura\nPosterous\nPowergap\nPrestashop\nPrototype\nProtovis\npunBB\nPython\nQuantcast\nQuick.Cart\nRaphael\nRBSChange\nReallyCMS\nreCAPTCHA\nRedHat\nReddit\nRedmine\nReinvigorate\nRequireJS\nRoundCube\nRuby\nS.Builder\ns9y\nscript.aculo.us\nSenchaTouch\nSeoshop\nShareThis\nShopify\nShopware\nsIFR\nSiteMeter\nSiteCatalyst\nSiteEdit\nSmartstore\nSMF\nsNews\nSnoobi\nSOBI2\nSoundManager\nSPDY\nSPIP\nSQLBuddy\nSquarespace\nSquizMatrix\nStatCounter\nStoreSystems\nSWFObject\nswift.engine\nSwiftlet\nTextpatternCMS\nthree.js\nTikiWikiCMSGroupware\nTimeplot\nTinyMCE\nTomatoCart\nTrac\nTumblr\nTwilightCMS\nTwitterBootstrap\nTypekit\nTypePad\nTYPO3\nUbercart\nUbuntu\nUmbraco\nUnderscore.js\nUNIX\nUserRules\nUserVoice\nVanilla\nVarnish\nvBulletin\nviennaCMS\nVignette\nVimeo\nVirtueMart\nVisualPath\nVIVVO\nVox\nVP-ASP\nW3Counter\nWebOptimizer\nwebEdition\nWebGUI\nWebPublisher\nWebsale\nWebsiteBaker\nWebtrekk\nWebtrends\nWeebly\nWikkaWiki\nWindowsServer\nWink\nWolfCMS\nWoopra\nWordPress\nXajax\nXanario\nXenForo\nXiTi\nXMB\nXOOPS\nxtCommerce\nxui\nYaBB\nYahoo!WebAnalytics\nYandex.Metrika\nYouTube\nYUIDoc\nYUI\nZenCart\nZend\nZepto\nZinnia\n```\n\n### Task List ###\n- [ ] Add instructions on how to run this on the server.\n\n\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/mlconnor/phantalyzer/issues"
  },
  "homepage": "https://github.com/mlconnor/phantalyzer",
  "_id": "phantalyzer@0.1.80",
  "_shasum": "16aa5051b2096d90bf505f9f0df2df1c47716f9c",
  "_from": "phantalyzer@",
  "_resolved": "https://registry.npmjs.org/phantalyzer/-/phantalyzer-0.1.80.tgz"
}
